// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using book_data_api.Data;

#nullable disable

namespace book_data_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807001321_MakeBookshelfDisplayNonNullable")]
    partial class MakeBookshelfDisplayNonNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookBookshelf", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("BookshelvesId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "BookshelvesId");

                    b.HasIndex("BookshelvesId");

                    b.ToTable("BookBookshelves", (string)null);
                });

            modelBuilder.Entity("BookTone", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("TonesId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "TonesId");

                    b.HasIndex("TonesId");

                    b.ToTable("BookTones", (string)null);
                });

            modelBuilder.Entity("BookshelfBookshelfGrouping", b =>
                {
                    b.Property<int>("BookshelfGroupingsId")
                        .HasColumnType("integer");

                    b.Property<int>("BookshelvesId")
                        .HasColumnType("integer");

                    b.HasKey("BookshelfGroupingsId", "BookshelvesId");

                    b.HasIndex("BookshelvesId");

                    b.ToTable("BookshelfGroupingBookshelves", (string)null);
                });

            modelBuilder.Entity("book_data_api.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int?>("CoverImageId")
                        .HasColumnType("integer");

                    b.Property<string>("ISBN10")
                        .HasColumnType("text");

                    b.Property<string>("ISBN13")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfPages")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginalPublicationYear")
                        .HasColumnType("integer");

                    b.Property<string>("SearchableString")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId");

                    b.HasIndex("SearchableString")
                        .HasDatabaseName("IX_Book_SearchableString");

                    b.ToTable("Books", t =>
                        {
                            t.HasCheckConstraint("CK_Book_AverageRating", "\"AverageRating\" BETWEEN 0 AND 5");
                        });
                });

            modelBuilder.Entity("book_data_api.Models.BookCoverImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateDownloaded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BookCoverImages");
                });

            modelBuilder.Entity("book_data_api.Models.BookReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasReviewContent")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("boolean")
                        .HasComputedColumnSql("CASE WHEN \"Review\" IS NOT NULL AND \"Review\" != '' THEN true ELSE false END", true);

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<string>("ReviewerFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReviewerRating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("HasReviewContent")
                        .HasDatabaseName("IX_BookReview_HasReviewContent")
                        .HasFilter("\"HasReviewContent\" = true");

                    b.ToTable("BookReviews", t =>
                        {
                            t.HasCheckConstraint("CK_BookReview_ReviewerRating", "\"ReviewerRating\" BETWEEN 0 AND 5");
                        });
                });

            modelBuilder.Entity("book_data_api.Models.Bookshelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Display")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGenreBased")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Bookshelves");
                });

            modelBuilder.Entity("book_data_api.Models.BookshelfGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsGenreBased")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BookshelfGroupings");
                });

            modelBuilder.Entity("book_data_api.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("book_data_api.Models.Tone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Tones");
                });

            modelBuilder.Entity("BookBookshelf", b =>
                {
                    b.HasOne("book_data_api.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("book_data_api.Models.Bookshelf", null)
                        .WithMany()
                        .HasForeignKey("BookshelvesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookTone", b =>
                {
                    b.HasOne("book_data_api.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("book_data_api.Models.Tone", null)
                        .WithMany()
                        .HasForeignKey("TonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookshelfBookshelfGrouping", b =>
                {
                    b.HasOne("book_data_api.Models.BookshelfGrouping", null)
                        .WithMany()
                        .HasForeignKey("BookshelfGroupingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("book_data_api.Models.Bookshelf", null)
                        .WithMany()
                        .HasForeignKey("BookshelvesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("book_data_api.Models.Book", b =>
                {
                    b.HasOne("book_data_api.Models.BookCoverImage", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CoverImage");
                });

            modelBuilder.Entity("book_data_api.Models.BookReview", b =>
                {
                    b.HasOne("book_data_api.Models.Book", "Book")
                        .WithMany("BookReviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("book_data_api.Models.Tone", b =>
                {
                    b.HasOne("book_data_api.Models.Tone", "Parent")
                        .WithMany("Subtones")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("book_data_api.Models.Book", b =>
                {
                    b.Navigation("BookReviews");
                });

            modelBuilder.Entity("book_data_api.Models.Tone", b =>
                {
                    b.Navigation("Subtones");
                });
#pragma warning restore 612, 618
        }
    }
}
